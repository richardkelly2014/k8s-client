package com.kubernetes.client.util;

import com.kubernetes.client.Config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

public final class IpAddressMatcher {

    private final InetAddress ipAddress;
    private final int bitMask;
    private final Logger logger = LoggerFactory.getLogger(IpAddressMatcher.class);


    public IpAddressMatcher(String ipAddress) {
        if (ipAddress.indexOf('/') > 0) {
            String[] addressWithMask = ipAddress.split("\\/");
            ipAddress = addressWithMask[0];
            this.bitMask = Integer.parseInt(addressWithMask[1]);
        } else {
            bitMask = -1;
        }
        this.ipAddress = parseAddress(ipAddress);
    }

    public boolean matches(String addressToCheck) {
        InetAddress checkAddress = parseAddress(addressToCheck);

        if (checkAddress == null) {
            return false;
        }

        if (ipAddress == null) {
            return false;
        }

        if (!ipAddress.getClass().equals(checkAddress.getClass())) {
            return false;
        }

        if (bitMask < 0) {
            return checkAddress.equals(ipAddress);
        }

        byte[] checkAddrBytes = checkAddress.getAddress();
        byte[] ipAddrBytes = ipAddress.getAddress();

        int oddBits = bitMask % 8;
        int maskBytes = bitMask / 8 + (oddBits == 0 ? 0 : 1);
        byte[] mask = new byte[maskBytes];

        Arrays.fill(mask, 0, oddBits == 0 ? mask.length : mask.length - 1, (byte) 0xFF);

        if (oddBits != 0) {
            int lastByte = (1 << oddBits) - 1;
            lastByte <<= 8 - oddBits;
            mask[mask.length - 1] = (byte) lastByte;
        }

        for (int i = 0; i < mask.length; i++) {
            if ((checkAddrBytes[i] & mask[i]) != (ipAddrBytes[i] & mask[i])) {
                return false;
            }
        }

        return true;
    }

    private InetAddress parseAddress(String address) {
        try {
            return InetAddress.getByName(address);
        } catch (UnknownHostException e) {
            // Log error only when address is not generated by client as default parameters
            if (!Config.DEFAULT_MASTER_URL.contains(address)) {
                logger.error("Failed to resolve hostname: ", address);
            }
            return null;
        }
    }

}
